{"version":3,"sources":["examples/Ex1.tsx","examples/Ex2.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Ex1","app","useRef","useEffect","current","scene","THREE","geometry1","geometry2","material","color","mesh1","mesh2","axisHelper","add","point","position","set","ambient","width","clientWidth","height","clientHeight","k","s","camera","lookAt","renderer","setSize","setClearColor","appendChild","domElement","Date","now","render","end","OrbitControls","addEventListener","ref","Ex2","geometry","mesh","z","animate","requestAnimationFrame","rotation","x","y","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PA8EeA,EA1EH,WACV,IAAMC,EAAMC,iBAAuB,MAoEnC,OAnEAC,qBAAU,WACR,GAAKF,EAAIG,QAAT,CAIA,IAAMC,EAAQ,IAAIC,IAIZC,EAAY,IAAID,IAAqB,GAAI,GAAI,IAC7CE,EAAY,IAAIF,IAAkB,GAAI,IAAK,KAC3CG,EAAW,IAAIH,IAA0B,CAC7CI,MAAO,MAEHC,EAAQ,IAAIL,IAAWC,EAAWE,GAClCG,EAAQ,IAAIN,IAAWE,EAAW,IAAIF,IAA0B,CACpEI,MAAO,SAEHG,EAAa,IAAIP,IAAiB,KACxCD,EAAMS,IAAIH,EAAOC,EAAOC,GAKxB,IAAME,EAAQ,IAAIT,IAAiB,SACnCS,EAAMC,SAASC,IAAI,IAAK,IAAK,KAC7BZ,EAAMS,IAAIC,GAEV,IAAMG,EAAU,IAAIZ,IAAmB,UACvCD,EAAMS,IAAII,GAMV,IAAMC,EAAQlB,EAAIG,QAAQgB,YACpBC,EAASpB,EAAIG,QAAQkB,aACrBC,EAAIJ,EAAQE,EACZG,EAAI,IAEJC,EAAS,IAAInB,KAA0BkB,EAAID,EAAGC,EAAID,EAAGC,GAAIA,EAAG,EAAG,KACrEC,EAAOT,SAASC,IAAI,IAAK,IAAK,KAC9BQ,EAAOC,OAAOrB,EAAMW,UAIpB,IAAMW,EAAW,IAAIrB,IACrBqB,EAASC,QAAQT,EAAOE,GACxBM,EAASE,cAAc,SAAU,GACjC5B,EAAIG,QAAQ0B,YAAYH,EAASI,YACrBC,KAAKC,MAAjB,IACMC,EAAS,WACb,IAAMC,EAAMH,KAAKC,MAETE,EAERR,EAASO,OAAO7B,EAAOoB,IAKzBS,IACAA,IACiB,IAAIE,IAAcX,EAAQE,EAASI,YAC3CM,iBAAiB,SAAUH,MACnC,IAGD,yBAAKI,IAAKrC,KClCCsC,EArCH,WACV,IAAMtC,EAAMC,iBAAuB,MA+BnC,OA7BAC,qBAAU,WACR,GAAKF,EAAIG,QAAT,CACA,IAAMe,EAAQlB,EAAIG,QAAQgB,YACpBC,EAASpB,EAAIG,QAAQkB,aACrBjB,EAAQ,IAAIC,IACZmB,EAAS,IAAInB,IAAwB,GAAIa,EAAQE,EACrD,GAAK,KAEDM,EAAW,IAAIrB,IACrBqB,EAASC,QAAQT,EAAOE,GACxBpB,EAAIG,QAAQ0B,YAAYH,EAASI,YAEjC,IAAMS,EAAW,IAAIlC,IACfG,EAAW,IAAIH,IAAwB,CAAEI,MAAO,QAChD+B,EAAO,IAAInC,IAAWkC,EAAU/B,GACtCJ,EAAMS,IAAI2B,GAEVhB,EAAOT,SAAS0B,EAAI,GAEJ,SAAVC,IACJC,sBAAsBD,GAEtBF,EAAKI,SAASC,GAAK,IACnBL,EAAKI,SAASE,GAAK,IAEnBpB,EAASO,OAAO7B,EAAOoB,GAEzBkB,MACC,IAED,yBAAKL,IAAKrC,KCnBC+C,MAZf,WAIE,OAHA7C,qBAAU,cACP,IAGD,yBAAK8C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ac659d2.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst Ex1 = () => {\r\n  const app = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (!app.current) return;\r\n    /**\r\n     * 创建场景对象Scene\r\n     */\r\n    const scene = new THREE.Scene();\r\n    /**\r\n     * 创建网格模型\r\n     */\r\n    const geometry1 = new THREE.SphereGeometry(60, 40, 40); // 创建一个球体几何对象\r\n    const geometry2 = new THREE.BoxGeometry(50, 100, 100); // 创建一个立方体几何对象Geometry\r\n    const material = new THREE.MeshLambertMaterial({\r\n      color: 0x0000ff,\r\n    }); // 材质对象Material\r\n    const mesh1 = new THREE.Mesh(geometry1, material); // 网格模型对象Mesh\r\n    const mesh2 = new THREE.Mesh(geometry2, new THREE.MeshLambertMaterial({\r\n      color: 0x00ffff,\r\n    })); // 网格模型对象Mesh\r\n    const axisHelper = new THREE.AxesHelper(250);\r\n    scene.add(mesh1, mesh2, axisHelper); // 网格模型添加到场景中\r\n    /**\r\n     * 光源设置\r\n     */\r\n    // 点光源\r\n    const point = new THREE.PointLight(0x222222);\r\n    point.position.set(400, 200, 300); // 点光源位置\r\n    scene.add(point); // 点光源添加到场景中\r\n    // 环境光\r\n    const ambient = new THREE.AmbientLight(0xffffff);\r\n    scene.add(ambient);\r\n    // console.log(scene)\r\n    // console.log(scene.children)\r\n    /**\r\n     * 相机设置\r\n     */\r\n    const width = app.current.clientWidth; // 窗口宽度\r\n    const height = app.current.clientHeight; // 窗口高度\r\n    const k = width / height; // 窗口宽高比\r\n    const s = 200; // 三维场景显示范围控制系数，系数越大，显示的范围越大\r\n    // 创建相机对象\r\n    const camera = new THREE.OrthographicCamera(-s * k, s * k, s, -s, 1, 1000);\r\n    camera.position.set(200, 300, 200); // 设置相机位置\r\n    camera.lookAt(scene.position); // 设置相机方向(指向的场景对象)\r\n    /**\r\n     * 创建渲染器对象\r\n     */\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(width, height);// 设置渲染区域尺寸\r\n    renderer.setClearColor(0xb9d3ff, 1); // 设置背景颜色\r\n    app.current.appendChild(renderer.domElement); // body元素中插入canvas对象\r\n    let start = Date.now();\r\n    const render = () => {\r\n      const end = Date.now();\r\n      const distence = end - start;\r\n      start = end;\r\n      // 执行渲染操作   指定场景、相机作为参数\r\n      renderer.render(scene, camera);\r\n      // mesh.rotateY(0.001 * distence);\r\n      // mesh.rotateX(0.001 * distence);\r\n      // requestAnimationFrame(render);\r\n    };\r\n    render();\r\n    render();\r\n    const controls = new OrbitControls(camera, renderer.domElement);// 创建控件对象\r\n    controls.addEventListener('change', render);// 监听鼠标、键盘事件\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={app} />\r\n  );\r\n};\r\n\r\nexport default Ex1;\r\n","import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst Ex2 = () => {\n  const app = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!app.current) return;\n    const width = app.current.clientWidth;\n    const height = app.current.clientHeight;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, width / height,\n      0.1, 1000);\n\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(width, height);\n    app.current.appendChild(renderer.domElement);\n\n    const geometry = new THREE.BoxGeometry();\n    const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\n    const mesh = new THREE.Mesh(geometry, material);\n    scene.add(mesh);\n\n    camera.position.z = 5;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      mesh.rotation.x += 0.01;\n      mesh.rotation.y += 0.01;\n\n      renderer.render(scene, camera);\n    };\n    animate();\n  }, []);\n  return (\n    <div ref={app} />\n  );\n};\n\nexport default Ex2;\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport Ex1 from './examples/Ex1';\r\nimport Ex2 from './examples/Ex2';\r\n\r\nfunction App() {\r\n  useEffect(() => {\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Ex1 />\r\n      <Ex2 />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}